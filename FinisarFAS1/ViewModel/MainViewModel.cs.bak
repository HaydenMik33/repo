using Common;
using FinisarFAS1.Utility;
using FinisarFAS1.View;
using GalaSoft.MvvmLight;
using GalaSoft.MvvmLight.Command;
using GalaSoft.MvvmLight.Messaging;
using GalaSoft.MvvmLight.Views;
using MESCommunications;
using MESCommunications.Utility;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Data;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Windows.Threading;
using System.Reflection;
using ToolService;
using static Common.Globals;
using Serilog;
using System.Net.Mail;
using System.Net;
using System.Text.RegularExpressions;
using System.ComponentModel;
using System.Text;

namespace FinisarFAS1.ViewModel
{
    /// <summary>
    /// This class contains properties that the main View can data bind to.
    /// <para>
    /// Use the <strong>mvvminpc</strong> snippet to add bindable properties to this ViewModel.
    /// </para>
    /// <para>
    /// You can also use Blend to data bind with the tool's support.
    /// </para>
    /// <para>
    /// See http://www.galasoft.ch/mvvm
    /// </para>
    /// </summary>
    public class MainViewModel : ViewModelBase
    {
        private readonly IDialogService2 dialogService;
        private MESService _mesService;

        // private Evatec currentEquipment;
        SECSHandler<Tool> currentTool;
        bool EquipmentNotTalking;

        const int MAXROWS = 25;

        DispatcherTimer dispatcherTimer = new DispatcherTimer();
        DispatcherTimer processingTimer = new DispatcherTimer();
        DispatcherTimer mainTimer = new DispatcherTimer();
        int mesCheckInSeconds = 10;
        int mainTick = 0;

        // Test data
        private string thisHostName = "";  // "TEX-L10015200" 
        string factoryName = "factoryName";

        private DataTable dtCamstar;

        private OperatorToolLotViewModel portLotInfo;

        public OperatorToolLotViewModel PortLotInfo {
            get { return portLotInfo; }
            set {
                portLotInfo = value;
                RaisePropertyChanged(nameof(PortLotInfo));
            }
        }

        Dictionary<int, OperatorToolLotViewModel> PortLotList = new Dictionary<int, OperatorToolLotViewModel>();

#if DEBUG
        TestData testWords = new TestData();
#endif

        /// <summary>
        /// Initializes a new instance of the MainViewModel class.
        /// </summary>
        public MainViewModel()
        {
            MyLog = new FASLog();
            // Initialize DI objects
            IDialogService2 dialogService1 = new MyDialogService(null);
            dialogService1.Register<DialogViewModel, DialogWindow>();
            dialogService = dialogService1;

            PortLotInfo = new OperatorToolLotViewModel(0, UsingMoq);
            PortLotList.Add(0, PortLotInfo);
            
            if (Common.Globals.UsingMoq)
                _mesService = new MESService(new MoqMESService());
            else
                _mesService = new MESService(new MESDLL());

            RegisterForMessages();
        }

        #region INITIALIZE SYSTEM CHECK CAMSTAR AND CHECK EQUIPMENT TIMERS 

        private void ReInitializeSystemHandler(ReInitializeSystemMessage msg)
        {
            Port1Wafers = CreateEmptyPortRows();

            TimeToStart = false;
            if (dispatcherTimer.IsEnabled)
                StopTimer();
            StartTimerLeftText = "";
            Completed = false;
            Aborted = Paused = Started = false;
            LotStatusColor = "Ready";

            CurrentRecipe = CurrentRunType = "";
            Step = Spec = Status = "";
            CurrentOperation = Recipe = Product = Comments = "";

            RaisePropertyChanged(nameof(AreThereWafers));
        }

        private void InitializeSystemHandler(InitializeSystemMessage msg)
        {
            MyLog.Debug("Starting InitializeSystem()...");
            CurrentControlstate = ControlStates.UNDEFINED;

            MyLog.Debug("GetConfigurationValues()...");
            GetConfigurationValues();
            thisHostName = CurrentSystemConfig.ACINameServerHost;

            MyLog.Debug("Starting SetupMESCommunication()...");
            SetupMESCommunication();

            MyLog.Debug("Starting SetupEquipment()...");
            EquipmentNotTalking = false;
            SetupEquipment();
            MyLog.Debug("Done SetupEquipment()...");

            MyLog.Debug("Starting Timer to check for Camstar and Equipment updates...");
            mainTimer.Tick += new EventHandler(mainTimer_Tick);
            mainTimer.Interval = new TimeSpan(0, 0, 1);
            mainTimer.Start();

            // Initialize some UI vlaues
            CamstarStatusText = CurrentToolConfig.CamstarString;
            StartTimerSeconds = CurrentToolConfig.StartTimerSeconds;

//#if DEBUG
//            StartTimerSeconds = -1;
//#endif
            Title = "Factory Automation System: " + CurrentToolConfig.Toolid;

            // Set UI bindings
            Started = false;
            IsProcessing = false;
            TimeToStart = false;
            StartTimerLeftText = "";
            OnlineBtnEnable = true;
            RaisePropertyChanged(nameof(AreThereWafers));
            Messenger.Default.Send(new WafersInGridMessage(0));

            Port1Wafers = CreateEmptyPortRows();
        }

        private void GetConfigurationValues()
        {
            try
            {
                ReadXmlConfigs();
            }
            catch (Exception e)
            {
                MyLog.Information(e.Message);
                var vm = new DialogViewModel(e.Message + " Error reading config files ", "", "Ok");
                dialogService.ShowDialog(vm);

                MyLog.Information($"Exit host due to config file read error, exiting Host...");

                Application.Current.Shutdown();
            }

            int idx = 0; 
            LoadPortNames = new ObservableCollection<string>();
            foreach (string portName in CurrentToolConfig.Loadports)
            {
                LoadPortNames.Add(portName);
                // We already added the first one
                if (++idx > 1)
                { 
                    OperatorToolLotViewModel otlVM = new OperatorToolLotViewModel(idx-1, UsingMoq);                    
                    PortLotList.Add(idx-1, otlVM);
                }
            }
            RaisePropertyChanged("LoadPortNames");

            factoryName = CurrentToolConfig.FactoryName;
        }

        static void CallWithTimeout(Action<MainViewModel> action, MainViewModel mdl, int timeoutMilliseconds)
        {
            Thread threadToKill = null;
            Action wrappedAction = () =>
            {
                threadToKill = Thread.CurrentThread;
                action(mdl);
            };
            IAsyncResult result = wrappedAction.BeginInvoke(null, null);
            if (result.AsyncWaitHandle.WaitOne(timeoutMilliseconds))
            {
                wrappedAction.EndInvoke(result);
            }
            else
            {
                threadToKill.Abort();
                //throw new TimeoutException();
            }
        }

        private void SetupMESCommunication()
        {
            var q = _mesService.Initialize(MESDefaultConfigDir + MESDefaultConfigFile, thisHostName);

            // Update CamStar first       
            CallWithTimeout(CamstarCall, this, 4000);

            UpdateCamstarStatusHandler(new CamstarStatusMessage(dtCamstar));
        }

        private void mainTimer_Tick(object sender, EventArgs e)
        {
            if (++mainTick % mesCheckInSeconds == 0)
            {
                // MyLog.Debug("mainTimer_Tick->Start...");
                CallWithTimeout(CamstarCall, this, 3000);
                UpdateCamstarStatusHandler(new CamstarStatusMessage(dtCamstar));

                // TODO: I would prefer currentTool == null here....
                if (EquipmentStatus == "Offline" && EquipmentNotTalking)
                {
                    SetupEquipment();
                }
                // MyLog.Debug("mainTimer_Tick->End...");
            }
        }

        public void CamstarCall(MainViewModel mdl)
        {
            dtCamstar = GetCamstarStatus();
        }

        public DataTable GetCamstarStatus()
        {
            try
            {
                return _mesService.GetResourceStatus(CurrentToolConfig.Toolid);
            }
            catch { return null; }
            finally { }
        }

        private List<string> recipeList;
        public List<string> RecipeList
        {
            get { return recipeList; }
            set { recipeList = value; RaisePropertyChanged(nameof(RecipeList)); }
        }

        private void SetupEquipment()
        {
            // Get ToolID status #2 with the ToolService project
            string _eq = CurrentToolConfig.Toolid;
            try
            {

                try {
                    MyLog.Debug($"SetupEquipment->GetType('ToolService.{CurrentToolConfig.ToolType}')");

                    currentTool = new SECSHandler<Tool>((Tool)Activator.CreateInstance(Assembly.Load("ToolService").GetType("ToolService." + CurrentToolConfig.ToolType), true));
                }
                catch (Exception ex)
                {
                    MyLog.Error(ex, $"Unable to start application: make sure the configured tool type {CurrentToolConfig.ToolType} in toolConfig.xml is supported");
                    Messenger.Default.Send(new EventMessage(DateTime.Now, "E", "Unable to start application for tool type '" + CurrentToolConfig.ToolType) + "'");
                    return;
                }

                MyLog.Debug($"SetupEquipment->InitializeTool...");
                currentTool.InitializeTool();
//                RecipeList = currentTool.RecipeList();
//#if DEBUG
//                if (RecipeList==null)
//                {
//                    RecipeList.Add("Recipe1");
//                    RecipeList.Add("Recipe2");
//                }
//#endif
            }
            catch (Exception ex)
            {
                MyLog.Error(ex, "SetupEquipment()");
            }
        }
        #endregion

        //public event EventHandler FocusOnInvalidTextBox;


        #region MESSAGE HANDLERS 
        private void UpdateCamstarStatusHandler(CamstarStatusMessage msg)
        {
            string tempStatus = "Offline";
            string tempColor = "Red";

            if (msg != null)
            {
                tempColor = msg.IsAvailable ? "Lime" : "Yellow";
                tempStatus = msg.ResourceStateName;
            }
            else
            {
                tempStatus = "Offline";
                tempColor = "Red";
            }
            // Only update at end so the colors are not flashing...
            CamstarStatus = tempStatus;
            CamstarStatusColor = tempColor;
        }

        private void UpdateControlStateHandler(ControlStateChangeMessage msg)
        {
            string tempStatus = msg.Description;
            string tempColor;
            ControlStates oldcs = CurrentControlstate;

            if (msg.ControlState == ControlStates.REMOTE)
            {
                tempStatus = "Online: Remote";
                tempColor = "Lime";
                EquipmentNotTalking = false; 
                LocalMode = false; 
            }
            else
            if (msg.ControlState == ControlStates.LOCAL)
            {
                tempStatus = "Online: Local";
                tempColor = "Yellow";
                EquipmentNotTalking = false;
                LocalMode = true;
            }
            else
            if (msg.ControlState == ControlStates.OFFLINE)
            {
                tempStatus = "Offline";
                tempColor = "Red";
                LocalMode = true;
            }
            else
            {
                tempStatus = "Unknown";
                tempColor = "DodgerBlue";
            }

            CurrentControlstate = msg.ControlState;
            EquipmentStatus = tempStatus;
            EquipmentStatusColor = tempColor;
        }


        private void UpdateProcessStateHandler(ProcessStateChangeMessage msg)
        {
            string tempStatus = msg.Description;
            string tempColor = "White";

            if (Aborted) return;
            //if (msg.ProcessState == ProcessStates.Compete)
            //    tempColor = "Lime";
            //else
            if (msg.ProcessState == ProcessStates.EXECUTING)
            {
                tempColor = "DodgerBlue";
                LotStatusColor = "Executing";
                Messenger.Default.Send(new SetAllWafersStatusMessage(0, PortLotInfo.Port1Lot1, "Executing..."));
                if (!string.IsNullOrEmpty(PortLotInfo.Port1Lot2))
                    Messenger.Default.Send(new SetAllWafersStatusMessage(0, PortLotInfo.Port1Lot2, "Executing..."));
            }
            else if (msg.ProcessState == ProcessStates.NOTREADY)
                tempColor = "Red";
            else if (msg.ProcessState == ProcessStates.READY)
                tempColor = "Azure";
            else if (msg.ProcessState == ProcessStates.WAIT)
                tempColor = "Yellow";
            else if (msg.ProcessState == ProcessStates.NOTTALKING)
            {
                ProcessState = "NO TOOL";
                tempColor = "Red";
            }

            ProcessState = msg.Description;
            ProcessStateColor = tempColor;
        }

        private void RegisterForMessages()
        {
            Messenger.Default.Register<InitializeSystemMessage>(this, InitializeSystemHandler);
            Messenger.Default.Register<ReInitializeSystemMessage>(this, ReInitializeSystemHandler);
            Messenger.Default.Register<CamstarStatusMessage>(this, UpdateCamstarStatusHandler);
            Messenger.Default.Register<ControlStateChangeMessage>(this, UpdateControlStateHandler);
            Messenger.Default.Register<ProcessStateChangeMessage>(this, UpdateProcessStateHandler);
            Messenger.Default.Register<RenumberWafersMessage>(this, RenumberWafersHandler);
            Messenger.Default.Register<MoveWafersMessage>(this, MoveWafersHandler);
            Messenger.Default.Register<CloseAndSendEmailMessage>(this, CloseEmailResponseMsgHandler);
            Messenger.Default.Register<EventMessage>(this, EventMessageHandler);
            Messenger.Default.Register<ProcessCompletedMessage>(this, ProcessingCompleteMsgHandler);
            Messenger.Default.Register<ProcessWaitMessage>(this, ProcessWaitMsgHandler);
            Messenger.Default.Register<ProcessContinueMessage>(this, ProcessContinueMsgHandler);
            Messenger.Default.Register<ProcessAbortMessage>(this, ProcessAbortMsgHandler);
            // Messenger.Default.Register<LoadLot1Message>(this, LoadLot1MsgHandler);
            Messenger.Default.Register<PromptToConfirmNextTabMessage>(this, PromptForNextTabMsgHandler);
            Messenger.Default.Register<LoadingWafersMessage>(this, loadingWafersMsgHandler);
            Messenger.Default.Register<AddWafersToGridMessage>(this, AddWafersToGridMsgHandler);
        }
        // This method is to turn on and off the overlay
        private void loadingWafersMsgHandler(LoadingWafersMessage msg)
        {
            LoadingWafers = msg.LoadingWafers;
            TimerText = msg.TimerText; 
        }

        private void PromptForNextTabMsgHandler(PromptToConfirmNextTabMessage msg)
        {
            var vm = new DialogViewModel($"Do you want to load Port 2/ Other Port?", "Ok", "Cancel");
            var result = dialogService.ShowDialog(vm);
            if (result.HasValue && result.Value==true)
            {
                CurrentTab = CurrentTab==1? 0 : 1 ; 
            }
        }

        private void ProcessingCompleteMsgHandler(ProcessCompletedMessage msg)
        {
            if (Aborted) return;    // Do not Complete Aborted wafers... this happened in Simbut prob not real life
            UpdateWaferStatus("Completed");
            LotStatusColor = "Complete";
            Completed = true;
            // This message comes in on a different thread
            Application.Current.Dispatcher.Invoke((Action)delegate
            {
                UploadData();
                MoveOutWafers();
            });
        }

        private void ProcessWaitMsgHandler(ProcessWaitMessage msg) => Messenger.Default.Send(new ProcessWaitMessage("Wait"));

        private void ProcessContinueMsgHandler(ProcessContinueMessage msg) => Messenger.Default.Send(new ProcessStateChangeMessage(ProcessStates.READY, "Ready"));

        private void ProcessAbortMsgHandler(ProcessAbortMessage msg)
        {
            MyLog.Information($"SECS->SendSECSAbort()");
            currentTool.SendSECSAbort();
            Started = false;
            Aborted = true;            
            IsProcessing = false;
            HoldWafers("Aborted by Factory Automation for " + PortLotInfo.OperatorID);
            UpdateWaferStatus("Aborted");
        }

        int numCannotCommunicateMES = 0; 
        private void EventMessageHandler(EventMessage msg)
        {
            // TODO: Make sure all these are still valid and in use
            if (msg.MsgType == "A")
            {
                int len = msg.Message.Length > 80 ? 80 : msg.Message.Length;
                string s = msg.Message.Substring(0, len);
                CurrentAlarm = msg.MsgDateTime + "-" + s;

                if (msg.CriticalAlarm)
                    alarmEmailHandler(msg.MsgDateTime, "TOOLID: " + PortLotInfo.ToolID + " CRITICAL ALARM: " + s);
            }
            else if (msg.MsgType == "PM")
            {
                if (msg.Message.Contains("Processing"))
                {
                    UpdateWaferStatus("In Processing");
                    LotStatusColor = "Processing";
                }
            }
            else if (msg.MsgType == "E")
            {
                string s = "CRITICAL ERROR: " + msg.Message;
                var vm = new DialogViewModel(s, "", "Ok");

                UpdateWaferStatus("Critical Error");
                LotStatusColor = "CRITICAL ERROR";
                if (msg.Message.Contains("Unable to start AutoShell comm"))
                {
                    // Only show cannot comm with Camstar at beginning then every 10 times
                    if (++numCannotCommunicateMES == 1 || numCannotCommunicateMES % 10 == 0)
                    {
                        Application.Current.Dispatcher.Invoke((Action)delegate
                        {
                            dialogService.ShowDialog(vm);
                        });
                        vm = null; 
                    }
                    EquipmentNotTalking = true;
                }
                else // Show all Critical Errors 
                {
                    Application.Current.Dispatcher.Invoke((Action)delegate
                    {
                        dialogService.ShowDialog(vm);
                    });
                    vm = null;  
                }

                errorEmailHandler(msg.Message);
            }
            else if (msg.MsgType == "L")
            {
                if (msg.SendEmail)
                {
                    logEmailHandler(msg);
                }
            }
        }

        #endregion     

        #region UI BINDINGS

        private ObservableCollection<Wafer> port1Wafers;
        public ObservableCollection<Wafer> Port1Wafers
        {
            get { return port1Wafers; }
            set
            {
                port1Wafers = value;
                RaisePropertyChanged(nameof(Port1Wafers));
                if (AreThereWafers)
                    Messenger.Default.Send(new WafersInGridMessage(port1Wafers?.Count));
                else
                    Messenger.Default.Send(new WafersInGridMessage(0));
            }
        }

        #region FLOW STATUSES
        // Flow statuses
        // PORT 1
        private bool _timeToProcess;
        public bool TimeToStart
        {
            get { return _timeToProcess; }
            set
            {
                _timeToProcess = value;
                RaisePropertyChanged(nameof(TimeToStart));
                RaisePropertyChanged(nameof(CanRightClick));
                Messenger.Default.Send(new WafersConfirmedMessage(value && AreThereWafers));
            }
        }

        //private bool _confirmed;
        //public bool Confirmed
        //{
        //    get { return _confirmed; }
        //    set
        //    {
        //        _confirmed = value;
        //        RaisePropertyChanged(nameof(Confirmed));
        //        ShowConfirmButtons = !value; 
        //    }
        //}

        private bool _started;
        public bool Started
        {
            get { return _started; }
            set
            {
                _started = value;
                RaisePropertyChanged(nameof(Started));
                RaisePropertyChanged(nameof(IsStoppable));
                RaisePropertyChanged(nameof(ShowStartButton));
                // TODO: Message to 
                //RaisePropertyChanged(nameof(DisabledAfterStart));
                //if (value == true)
                //    IsRecipeOverridable = false; 
            }
        }

       

        private bool _paused;
        public bool Paused
        {
            get { return _paused; }
            set
            {
                _paused = value;
                RaisePropertyChanged(nameof(Paused));
                RaisePropertyChanged(nameof(IsStoppable));
                RaisePropertyChanged(nameof(ShowStartButton));
            }
        }

        private bool _aborted;
        public bool Aborted
        {
            get { return _aborted; }
            set
            {
                _aborted = value;
                RaisePropertyChanged(nameof(Aborted));
                RaisePropertyChanged(nameof(IsStoppable));
                RaisePropertyChanged(nameof(ShowStartButton));
            }
        }

        private bool _isProcessing;
        public bool IsProcessing
        {
            get { return _isProcessing; }
            set
            {
                _isProcessing = value;
                RaisePropertyChanged(nameof(IsProcessing));
                // RaisePropertyChanged(nameof(IsStoppable));
            }
        }        
        
        private bool _onlineBtnEnable;
        public bool OnlineBtnEnable
        {
            get { return _onlineBtnEnable; }
            set
            {
                _onlineBtnEnable = value; 
                RaisePropertyChanged(nameof(OnlineBtnEnable));
            }
        }


        private bool _localMode;
        public bool LocalMode
        {
            get { return _localMode; }
            set
            {
                _localMode = value;
                RaisePropertyChanged(nameof(LocalMode));
                RaisePropertyChanged(nameof(IsLocal));
				OnlineBtnEnable = !value;
                RaisePropertyChanged(nameof(OnlineBtnEnable));
            }
        }

        public bool IsLocal => LocalMode;

        public bool IsStoppable => Started && !Aborted;
        public bool ShowStartButton
        {
            get
            {
                if (Aborted) return true; 
                return Started && !Aborted;
            }
        }


        public bool AreThereWafers
        {
            get
            {
                if (Port1Wafers == null || Port1Wafers.Count == 0)
                {                    
                    return false;
                }
                else
                {
                    for (int i = 0; i < MAXROWS; ++i)
                    {
                        if (!string.IsNullOrEmpty(port1Wafers[i].WaferNo))
                        {                            
                            return true;
                        }
                    }
                }
                return false;
            }
        }

        public bool CanRightClick {
            get {

                return !TimeToStart && AreThereWafers;
            }
        }
        #endregion 

        DataTable dtWafers; 
       
        private void MoveWafersHandler(MoveWafersMessage msg)
        {
            bool movedOne = false;
            int idxToMove = MAXROWS - msg.SlotToMove;
            Wafer mtWafer = new Wafer();
            // Remove top 1 if moving up
            int topIdx = 0;
            do
            {
                if (string.IsNullOrEmpty(Port1Wafers[topIdx].ContainerName))
                {
                    Port1Wafers.RemoveAt(topIdx);
                    movedOne = true;
                }
            } while (!movedOne && ++topIdx < idxToMove);
            if (movedOne)
            {
                Port1Wafers.Insert(idxToMove, mtWafer);
                RenumberWafersHandler(null);
                RaisePropertyChanged("Port1Wafers");
            }
        }

        private ObservableCollection<Wafer> CreateEmptyPortRows(int rowCount = MAXROWS)
        {
            ObservableCollection<Wafer> tempList = new ObservableCollection<Wafer>();
            // rowCount = 1; 
            for (int i = rowCount; i > 0; --i)
            {
                tempList.Add(new Wafer() { Slot = i.ToString() });
            }
            return tempList;
        }

        private string _currentRecipe;
        public string CurrentRecipe {
            get { return _currentRecipe; }
            set {
                if (_currentRecipe != value)
                {
                    // Change receip no matter what
                    _currentRecipe = value;
                    // TODO: Is this correct?
                    // Only change wafer recipes if the length is > 3
                    if (!string.IsNullOrEmpty(value)) // && value.Length > 3)
                    {
                        Messenger.Default.Send(new SetAllWafersRecipeMessage(value));
                    }
                    else
                    {
                        // TODO: Bad recipe dialog?
                    }
                }
                RaisePropertyChanged("CurrentRecipe");
            }
        }

        private string currentRunType;
        public string CurrentRunType {
            get { return currentRunType; }
            set { currentRunType = value; RaisePropertyChanged(nameof(CurrentRunType)); }
        }

    
  
 
     
        #region STATES: CONTROL AND PROCESS / TOP LEFT

        private string _camstarStatus;
        public string CamstarStatus {
            get { return _camstarStatus; }
            set {
                _camstarStatus = value;
                RaisePropertyChanged(nameof(CamstarStatus));
            }
        }
        private ControlStates CurrentControlstate { get; set; }
     
        private string _equipmentStatus;
        public string EquipmentStatus {
            get { return _equipmentStatus; }
            set {
                _equipmentStatus = value;
                RaisePropertyChanged(nameof(EquipmentStatus));
            }
        }


        private string _processState;
        public string ProcessState
        {
            get { return "Process State: " + _processState; }
            set
            {
                _processState = value;
                RaisePropertyChanged(nameof(ProcessState));
            }
        }

        private string _processStateColor;
        public string ProcessStateColor
        {
            get { return _processStateColor; }
            set
            {
                _processStateColor = value;
                RaisePropertyChanged(nameof(ProcessStateColor));
            }
        }

        private string _title;
        public string Title
        {
            get { return _title; }
            set
            {
                _title = value;
                RaisePropertyChanged(nameof(Title));
            }
        }

        private string _camstarStatusText;
        public string CamstarStatusText
        {
            get { return _camstarStatusText; }
            set
            {
                _camstarStatusText = value;
                RaisePropertyChanged(nameof(CamstarStatusText));
            }
        }

        public int StartTimerSeconds { get; set; }

     
        private bool _loadingWafers;
        public bool LoadingWafers
        {
            get { return _loadingWafers; }
            set { _loadingWafers = value; RaisePropertyChanged(nameof(LoadingWafers)); }
        }


        private string _lotStatusColor; 
        public string LotStatusColor
        {
            get { return _lotStatusColor; }
            set
            {
                string processingStep = value; 
                _lotStatusColor = Globals.GetColor(processingStep);
                RaisePropertyChanged(nameof(LotStatusColor));
            }
        }
  

        private ObservableCollection<string> _loadPortNames;
        public ObservableCollection<string> LoadPortNames
        {
            get { return _loadPortNames; }
            set
            {
                _loadPortNames = value;
            }
        }

        private string _currentAlarm;
        public string CurrentAlarm
        {
            get { return _currentAlarm; }
            set
            {
                _currentAlarm = value;
                RaisePropertyChanged("CurrentAlarm");
            }
        }
    

        private string _camstarStatusColor;
        public string CamstarStatusColor
        {
            get { return _camstarStatusColor; }
            set
            {
                _camstarStatusColor = value;
                RaisePropertyChanged("CamstarStatusColor");
            }
        }

        private string _equipmentStatusColor;
        public string EquipmentStatusColor
        {
            get { return _equipmentStatusColor; }
            set
            {
                _equipmentStatusColor = value;
                RaisePropertyChanged("EquipmentStatusColor");
            }
        }

        // SCREEN 2
        private List<string> _currentWaferSetup;
        public List<string> CurrentWaferSetup
        {
            get { return _currentWaferSetup; }
            set
            {
                _currentWaferSetup = value;
                RaisePropertyChanged("CurrentWaferSetup");
            }
        }

        private List<string> _actualWaferSetup;
        public List<string> ActualWaferSetup
        {
            get { return _actualWaferSetup; }
            set
            {
                _actualWaferSetup = value;
                RaisePropertyChanged("ActualWaferSetup");
            }
        }       

   

#region OPERATOR VIEW UI BINDINGS
        private string _operation;
        public string CurrentOperation {
            get { return _operation; }
            set { _operation = value; RaisePropertyChanged(nameof(CurrentOperation)); }
        }

        private string _recipe;
        public string Recipe {
            get { return _recipe; }
            set { _recipe = value; RaisePropertyChanged(nameof(Recipe)); }
        }

        private string _product;
        public string Product {
            get { return _product; }
            set { _product = value; RaisePropertyChanged(nameof(Product)); }
        }

        private string _comment;
        public string Comments {
            get { return _comment; }
            set { _comment = value; RaisePropertyChanged(nameof(Comments)); }
        }

        private string _step;
        public string Step
        {
            get { return _step; }
            set { _step = value; RaisePropertyChanged(nameof(Step)); }
        }

        private string _spec;
        public string Spec
        {
            get { return _spec; }
            set { _spec = value; RaisePropertyChanged(nameof(Spec)); }
        }

        private string _field6;
        public string Status
        {
            get { return _field6; }
            set { _field6 = value; RaisePropertyChanged(nameof(Status)); }
        }

#endregion

#region GRID MANIPULATION
        //  GRID MANIPULATION
        private void AddWafersToTopGrid(List<Wafer> wafers)
        {
            ObservableCollection<Wafer> currentWafers = new ObservableCollection<Wafer>(Port1Wafers);
            ObservableCollection<Wafer> goodList = new ObservableCollection<Wafer>();
            ObservableCollection<Wafer> bottomList = new ObservableCollection<Wafer>();
            int slotNo = 0;

            // Find first top index
            int topIdx = 0;
            for (int i = 0; i < MAXROWS; ++i)
            {
                if (!string.IsNullOrEmpty(currentWafers[i].WaferNo))
                {
                    topIdx = i;
                    break;
                }
            }

            // Copy good rows to goodList
            if (topIdx > 0)
            {
                for (int i = topIdx; i < MAXROWS; ++i)
                {
                    bottomList.Add(currentWafers[i]);
                }
            }

            int newListCount = wafers.Count;

            if (topIdx - newListCount < 0)
            {
                var vm = new DialogViewModel("There are too many new wafers to add to current list. Continue?", "Yes", "No");

                bool? result = dialogService.ShowDialog(vm);
                if (result.HasValue && result.GetValueOrDefault() == true)
                {
                }
                Port1Wafers = currentWafers;
                RenumberWafersHandler(null);
                Port1Lot2 = "";
                return;
            }

            // Set currentWafers to goodList and
            Port1Wafers = new ObservableCollection<Wafer>(wafers);

            // Add currentwafers to bottom then add in empty then renumber slots
            foreach (var tempwafer in bottomList)
            {
                Port1Wafers.Add(tempwafer);
            }

            // Add in empty slots at top
            slotNo = Port1Wafers.Count;
            for (int i = MAXROWS - slotNo; i > 0; --i)
            {
                Port1Wafers.Insert(0, new Wafer());
            }

            RaisePropertyChanged(nameof(CanRightClick));

            // Renumber
            RenumberWafersHandler(null);
        }

        private void AddWafersToGridMsgHandler(AddWafersToGridMessage msg)
        {
            List<Wafer> wafersToBeAdded = msg.listWafers;
            ObservableCollection<Wafer> currentWafers;
            int slotNo = 0;

            // TODO: Change when break out WaferGrid
            if (msg.PortNo != CurrentTab) return;

            try
            {
                currentWafers = new ObservableCollection<Wafer>(Port1Wafers);
                var goodList = currentWafers.ToList().Where(w => !string.IsNullOrEmpty(w.WaferNo));
                currentWafers = new ObservableCollection<Wafer>(goodList);

                Port1Wafers = new ObservableCollection<Wafer>(wafersToBeAdded);

                // Add currentwafers to bottom then add in empty then renumber slots
                foreach (var tempwafer in currentWafers)
                {
                    Port1Wafers.Add(tempwafer);
                }

                // Add in empty slots at top
                slotNo = Port1Wafers.Count;
                for (int i = MAXROWS - slotNo; i > 0; --i)
                {
                    Port1Wafers.Insert(0, new Wafer());
                }

                RaisePropertyChanged(nameof(AreThereWafers));
                RenumberWafersHandler(null);
            }
            catch (Exception ex)
            {
                MyLog.Error(ex, "AddWafersToGrid()");
            }
        }

        private void RenumberWafersHandler(RenumberWafersMessage msg)
        {
            ObservableCollection<Wafer> currentWafers = new ObservableCollection<Wafer>(Port1Wafers);
            for (int i = MAXROWS - 1, idx = 0; i >= 0; --i, ++idx)
            {
                string newSlot = (i + 1).ToString();
                currentWafers[idx].Slot = newSlot;
            }
            Port1Wafers = new ObservableCollection<Wafer>(currentWafers);
        }

#region MES CALLS FOR MOVEIN, MOVEOUT and HOLD
        private bool MoveInWafers()
        {
            string errMessage = "";
            string errMessage2 = "";
            string comment = "Moved in through Factory Automation";
            const string ALREADYMOVEDIN = "MOVE-IN HAS ALREADY" ;
            bool movedIn1 = false;
            bool movedIn2 = false;
            bool requiredCertification = CurrentToolConfig.MoveInRequireCertification;

            // Thread.Sleep(3000);
            // Try to movein lot1
            // if there is an error, display and return 
            // if ok, then display moved in for lot1, and try to move in lot2
            // if there is an error, display error 
            // return from method
            //
            //SHMMoveIn(string sContainer, ref string strErrMsg, 
            //                  bool RequiredCertification, string sEmployee = "", 
            //                  string sComments = "", string sResource = "", string sFactory = "");
            if (!CheckForMovedInAlready(PortLotInfo.Port1Lot1))
            {
                MyLog.Information($"MES->MoveIn(Lot1={PortLotInfo.Port1Lot1},  ref errMsg, {requiredCertification}, {PortLotInfo.OperatorID}, {comment}, {PortLotInfo.ToolID}, {factoryName})");
                movedIn1 = _mesService.MoveIn(PortLotInfo.Port1Lot1, ref errMessage, requiredCertification, PortLotInfo.OperatorID, comment, PortLotInfo.ToolID, factoryName);
                MyLog.Information($"MES->MoveIn returned: movedIn={movedIn1},  errMsg={errMessage}");
                // Per ZH on 2/22 - If lot already moved in then keep on going
                if (!movedIn1 && errMessage.ToUpper().Contains(ALREADYMOVEDIN))
                    movedIn1 = true;
            }
            else
            {
                MyLog.Information($"MES->MoveIn({PortLotInfo.Port1Lot1} was ALREADY MovedIn");
                movedIn1 = true;
            }
            if (movedIn1 == false)
            {
                PortLotInfo.Port1Lot1Color = "Red";
                string errString = $"MES->MoveIn:Error moving in lot #{PortLotInfo.Port1Lot1}: {errMessage}";
                var vm = new DialogViewModel(errString, "", "Ok");
                Application.Current.Dispatcher.Invoke((Action)delegate
                {
                    dialogService.ShowDialog(vm);
                });
                Messenger.Default.Send(new SetAllWafersStatusMessage(0, PortLotInfo.Port1Lot1, "ERROR on MoveIn"));
                MyLog.Error(errString);
                return false;
            }
            else
            {
                Messenger.Default.Send(new SetAllWafersStatusMessage(0, PortLotInfo.Port1Lot1, WaferStatus.MovedIn.ToString()));
                LotStatusColor = "MovedIn";
            }

            Thread.Sleep(1000);

            if (!string.IsNullOrEmpty(PortLotInfo.Port1Lot2))
            {
                if (!CheckForMovedInAlready(PortLotInfo.Port1Lot2))
                {                    
                    MyLog.Information($"MES->MoveIn2(Lot2={PortLotInfo.Port1Lot2},  ref errMsg, {requiredCertification}, {PortLotInfo.OperatorID}, {comment}, {PortLotInfo.ToolID}, {factoryName})");
                    movedIn2 = _mesService.MoveIn(PortLotInfo.Port1Lot2, ref errMessage2, requiredCertification, PortLotInfo.OperatorID, comment, PortLotInfo.ToolID, factoryName);
                    MyLog.Information($"MES->MoveIn2 returned: movedIn={movedIn2},  errMsg={errMessage2}");
                    if (!movedIn2 && errMessage2.ToUpper().Contains(ALREADYMOVEDIN))
                        movedIn2 = true;
                }
                else
                {
                    MyLog.Information($"MES->MoveIn{PortLotInfo.Port1Lot2} was ALREADY MovedIn");
                    movedIn2 = true;
                }

                if (movedIn2 == false)
                {
                    PortLotInfo.Port1Lot2Color = "Red";
                    string errString = $"MES->MoveIn2:Error moving in lot #{PortLotInfo.Port1Lot2}: {errMessage2}";
                    var vm = new DialogViewModel(errString, "", "Ok");
                    Application.Current.Dispatcher.Invoke((Action)delegate
                    {
                        dialogService.ShowDialog(vm);
                    });
                    Messenger.Default.Send(new SetAllWafersStatusMessage(0, PortLotInfo.Port1Lot2, "ERROR on MoveIn"));
                    MyLog.Error(errString);
                    return false;
                }
                else
                {
                    Messenger.Default.Send(new SetAllWafersStatusMessage(0, PortLotInfo.Port1Lot2, WaferStatus.MovedIn.ToString()));
                    LotStatusColor = "MovedIn"; 
                }
            }
            // If no error up to this point, then return true
            return true; 
        }

        private bool CheckForMovedInAlready(string lot)
        {
            bool bRet = false;
            var p1l1Wafers = Port1Wafers.Where(w => w.ContainerName == lot);
            if (p1l1Wafers == null || p1l1Wafers.Count() == 0)
                return true; 
            foreach (Wafer w in p1l1Wafers)
            {
                string status = w.Status.ToUpper();
                if (status.Contains("MOVED IN") || status.Contains("MOVEDIN"))
                    bRet = true; 
            }
            return bRet; 
        }      

        private bool MoveOutWafers()
        {
            // Sometimes as an edge test, this call comes in in the middle of a manual run..so we did not start it! 
            // So we have no lots, so bad things happen! 
            // So let's check! And just return true t okeep on flowing. 
            if (Port1Wafers == null || Port1Wafers.Count == 0)
                return true; 

            string errMessage = "";
            string errMessage2 = "";
            string comment = "MoveOut at Complete for Lot #" + PortLotInfo.Port1Lot1 + " by Factory Automation";
            bool movedOut1 = false;
            bool movedOut2 = false;
            bool validateData = CurrentToolConfig.MoveOutValidateData;

            // Try to moveout lot1
            // if there is an error, display and return 
            // if ok, then display moved out for lot1, and try to move out lot2
            // if there is an error, display error 
            // return from method
            //
            //SHMMoveOut(string sContainer, ref string strErrMsg, 
            //                  bool RequiredCertification, string sEmployee = "", 
            //                  string sComments = "");
            MyLog.Information($"MES->MoveOut(Lot1={PortLotInfo.Port1Lot1},  ref errMsg, {validateData}, {PortLotInfo.OperatorID}, {comment})");
            movedOut1 = _mesService.MoveOut(PortLotInfo.Port1Lot1, ref errMessage, validateData, PortLotInfo.OperatorID, comment);
            MyLog.Information($"MES->MoveOut returned: movedOut={movedOut1},  errMsg={errMessage}");
            if (movedOut1 == false)
            {
                string errString = $"MES->MoveOut:Error moving out lot #{PortLotInfo.Port1Lot1}: {errMessage}";
                var vm = new DialogViewModel(errString, "", "Ok");
                Application.Current.Dispatcher.Invoke((Action)delegate
                {
                    dialogService.ShowDialog(vm);
                });
                Messenger.Default.Send(new SetAllWafersStatusMessage(0, PortLotInfo.Port1Lot1, "ERROR on MoveOut"));
                MyLog.Error(errString);
                return false;
            }
            else
            {
                Messenger.Default.Send(new SetAllWafersStatusMessage(0, PortLotInfo.Port1Lot1, WaferStatus.MovedOut.ToString()));
            }

            if (!string.IsNullOrEmpty(PortLotInfo.Port1Lot2))
            {
                comment = "MoveOut at complete for Lot #" + PortLotInfo.Port1Lot2;
                MyLog.Information($"MES->MoveOut2(Lot2={PortLotInfo.Port1Lot2},  ref errMessage2, {validateData}, {PortLotInfo.OperatorID}, {comment})");
                movedOut2 = _mesService.MoveOut(PortLotInfo.Port1Lot2, ref errMessage2, validateData, PortLotInfo.OperatorID, comment);
                MyLog.Information($"MES->MoveOut2 returned: movedOut={movedOut2},  errMsg={errMessage2}");
                if (movedOut2 == false)
                {
                    string errString = $"Error moving out lot #{PortLotInfo.Port1Lot2}: {errMessage2}";
                    var vm = new DialogViewModel(errString, "", "Ok");
                    Application.Current.Dispatcher.Invoke((Action)delegate
                    {
                        dialogService.ShowDialog(vm);
                    });
                    Messenger.Default.Send(new SetAllWafersStatusMessage(0, PortLotInfo.Port1Lot2, "ERROR on MoveOut"));
                    MyLog.Error(errString);
                    return false;
                }
                else
                {
                    Messenger.Default.Send(new SetAllWafersStatusMessage(0, PortLotInfo.Port1Lot2, WaferStatus.MovedOut.ToString()));
                }
            }
            return true;
        }

        private bool HoldWafers(string comment)
        {
            string errMessage = "";
            string holdReason = "Other"; // Peer ZH 3/3/19
            bool holdLot1 = false;
            bool holdLot2 = false;

            // Try to hold lots
            // if there is an error, display and return 
            // if ok, then display Hold for lot1, and try to Hold lot2
            // if there is an error, display error 
            // return from method
            //
            // bool SHMHold(string container, string holdReason, ref string errorMsg,
            //              string comment, string factory, string employee, string resourceName);
            MyLog.Information($"MES->HoldWafer(Lot1={PortLotInfo.Port1Lot1},  {holdReason}, ref errMsg, {comment}, {factoryName}, {PortLotInfo.OperatorID}, {PortLotInfo.ToolID})");
            holdLot1 = _mesService.Hold(PortLotInfo.Port1Lot1, holdReason, ref errMessage, comment, factoryName, PortLotInfo.OperatorID, PortLotInfo.ToolID);
            MyLog.Information($"MES->HoldWafer1 returned: holdLot1={holdLot1},  errMsg={errMessage}");
            if (holdLot1 == false)
            {
                string errString = $"MES->HoldWafers2:Error putting lot #{PortLotInfo.Port1Lot1} on Hold: {errMessage}";
                var vm = new DialogViewModel(errString, "", "Ok");
                Application.Current.Dispatcher.Invoke((Action)delegate
                {
                    dialogService.ShowDialog(vm);
                });
                SetAllWafersStatus(PortLotInfo.Port1Lot1, "ERROR on HOLD request to Camstar, Lot Aborted");
                Messenger.Default.Send(new SetAllWafersStatusMessage(0, PortLotInfo.Port1Lot2, "Executing..."));
                MyLog.Error(errString);
                return false;
            }
            else
            {
                SetAllWafersStatus(PortLotInfo.Port1Lot1, WaferStatus.Hold.ToString());
                Messenger.Default.Send(new SetAllWafersStatusMessage(0, PortLotInfo.Port1Lot2, "Executing..."));
            }

            if (!string.IsNullOrEmpty(PortLotInfo.Port1Lot2))
            {
                MyLog.Information($"MES->HoldWafer2(Lot2={PortLotInfo.Port1Lot2},  {holdReason}, ref errMsg, {comment}, {factoryName}, {PortLotInfo.OperatorID}, {PortLotInfo.ToolID})");
                holdLot2 = _mesService.Hold(PortLotInfo.Port1Lot2, holdReason, ref errMessage, comment, factoryName, PortLotInfo.OperatorID, PortLotInfo.ToolID);
                MyLog.Information($"MES->HoldWafer2 returned: holdLot2={holdLot2},  errMsg={errMessage}");

                if (holdLot2 == false)
                {
                    string errString = $"MES->HoldWafers2:Error putting lot #{PortLotInfo.Port1Lot2} on Hold: {errMessage}";
                    var vm = new DialogViewModel(errString, "", "Ok");
                    Application.Current.Dispatcher.Invoke((Action)delegate
                    {
                        dialogService.ShowDialog(vm);
                    });
                    SetAllWafersStatus(PortLotInfo.Port1Lot2, "ERROR on HOLD request to Camstar, Lot Aborted");
                    Messenger.Default.Send(new SetAllWafersStatusMessage(0, PortLotInfo.Port1Lot2, "Executing..."));
                    MyLog.Error(errString);
                    return false;
                }
                else
                {
                    SetAllWafersStatus(PortLotInfo.Port1Lot2, WaferStatus.Hold.ToString());
                    Messenger.Default.Send(new SetAllWafersStatusMessage(0, PortLotInfo.Port1Lot2, "Executing..."));
                }
            }
            return true;
        }
#endregion
        public List<Wafer> SelectedWafers { get; set; }

        private void SetAllWafersRecipe(string newRecipe)
        {
            ObservableCollection<Wafer> currentWafers = new ObservableCollection<Wafer>(Port1Wafers);
            for (int i = 0; i < currentWafers.Count; ++i)
            {
                var cw = currentWafers[i];
                if (!string.IsNullOrEmpty(cw.ContainerName))
                    cw.Recipe = newRecipe; 
            }
            Recipe = newRecipe;
            Port1Wafers = new ObservableCollection<Wafer>(currentWafers);
        }

        private void SetAllWafersStatus(string lotId, string waferStatus)
        {
            ObservableCollection<Wafer> currentWafers = new ObservableCollection<Wafer>(Port1Wafers);
            for (int i = 0; i < currentWafers.Count; ++i)
            {
                var cw = currentWafers[i];
                if (!string.IsNullOrEmpty(cw.ContainerName) && cw.ContainerName.Equals(lotId))
                    cw.Status = waferStatus;
            }
            Port1Wafers = new ObservableCollection<Wafer>(currentWafers);
        }

        private void UpdateWaferStatus(string newStatus)
        {
            if (Port1Wafers == null || Port1Wafers.Count == 0) return; 

            string testStatus = newStatus.ToUpper();
            ObservableCollection<Wafer> currentWafers = new ObservableCollection<Wafer>(Port1Wafers);
            for (int i = 0; i < currentWafers.Count; ++i)
            {
                if (!string.IsNullOrEmpty(currentWafers[i].WaferNo) && !currentWafers[i].Status.Contains("Completed"))
                {
                    if (testStatus.Contains("ABORT"))
                        currentWafers[i].Status += "-" + newStatus;
                    else
                        currentWafers[i].Status = newStatus;
                }
            }
            Port1Wafers = new ObservableCollection<Wafer>(currentWafers);
            LotStatusColor = newStatus;            
        }

        private List<Wafer> GetAscendingListOfWafersBySlot(List<Wafer> selectedWafers)
        {
            List<Wafer> orderedList;
            if (selectedWafers?.Count > 1)
                orderedList = selectedWafers.OrderBy(w => Int32.Parse(w.Slot)).Reverse().ToList();
            else
                orderedList = new List<Wafer>(selectedWafers);
            return orderedList;
        }

        private void moveUpCmdHandler()
        {
            int? cnt = SelectedWafers?.Count;
            if (cnt == null || cnt <= 0) return;

            // Remove from list 
            List<Wafer> moveWafers = GetAscendingListOfWafersBySlot(SelectedWafers);

            if (moveWafers[0].Slot != "25")
            {
                moveWafers.ForEach(wafer =>
                {
                    Port1Wafers.Remove(wafer);
                    Port1Wafers.Insert(MAXROWS - Int32.Parse(wafer.Slot) - 1, wafer);
                });
                RenumberWafersHandler(null);
                Messenger.Default.Send(new SelectedWafersInGridMessage(moveWafers));
            }            
        }

        private void moveDownCmdHandler()
        {
            int? cnt = SelectedWafers?.Count;
            if (cnt == null || cnt <= 0) return;

            // Remove from list 
            List<Wafer> moveWafers = GetAscendingListOfWafersBySlot(SelectedWafers);
            if (moveWafers.Last().Slot == "1")
                return;

            moveWafers.Reverse();
            moveWafers.ForEach(wafer =>
            {
                Port1Wafers.Remove(wafer);
                Port1Wafers.Insert(MAXROWS - Int32.Parse(wafer.Slot) + 1, wafer);
            });


            RenumberWafersHandler(null);
            Messenger.Default.Send(new SelectedWafersInGridMessage(moveWafers));
        }

        private void addEmptyRowCmdHandler()
        {
            int? cnt = SelectedWafers?.Count;
            if (cnt == null || cnt <= 0) return;

            // Remove from list 
            List<Wafer> moveWafers = GetAscendingListOfWafersBySlot(SelectedWafers);

            if (moveWafers[0].Slot != "25")
            {
                moveWafers.ForEach(wafer =>
                {

                    Messenger.Default.Send(new MoveWafersMessage(wafer));
                });
            }
        }

        #endregion

        private bool _completed;

        public bool Completed
        {
            get { return _completed; }
            set { _completed = value; RaisePropertyChanged(nameof(Completed)); }
        }
        private bool UploadData()
        {
            // Sometimes as an edge test, this call comes in in the middle of a manual run..so we did not start it! 
            // So we have no lots, so bad things happen! 
            // So let's check! And just return true t okeep on flowing. 
            if (Port1Wafers == null || Port1Wafers.Count == 0)
                return true;

            bool goodUpload = true;
            try
            {
                Dictionary<string, string> dataToUpload = currentTool.UploadData();
                //string[] uploadArray = dataToUpload?.Values.ToArray();

                MyLog.Information($"MES->ExecuteDC(Lot1={Port1Lot1}, WF_FMT_P_DATA, WF_FMT_P_DATA, {dataToUpload}, {OperatorID}, Data Upload for {ToolID} by Factory Automation)");
                string uploadString = $"Uploading Data({CurrentToolConfig.Loadports[0]}, Lot1:{Port1Lot1} and Lot2:{Port1Lot2}, {CurrentRecipe}, {OperatorID})";
                uploadString += Environment.NewLine + "\t\t\t\t\t" + "Uploaded Data:";
                foreach (var entry in dataToUpload)
                {
                    uploadString += (Environment.NewLine + "\t\t\t\t\t" + entry.Key + ": " + entry.Value);
                }
                MyLog.Information(uploadString);

                string retString1 = _mesService.ExecuteDC(Port1Lot1, "WF_FMT_P_DATA", "WF_FMT_P_DATA", dataToUpload, OperatorID, "Data Upload for " + ToolID + " by Factory Automation");
                MyLog.Information($"MES->ExecuteDC returned string={retString1}");

                if (!string.IsNullOrEmpty(Port1Lot2))
                {
                    MyLog.Information($"MES->ExecuteDC2(Lot2={Port1Lot2}, WF_FMT_P_DATA, WF_FMT_P_DATA, {dataToUpload}, {OperatorID}, Data Upload for {ToolID} by Factory Automation)");
                    string retString2 = _mesService.ExecuteDC(Port1Lot2, "WF_FMT_P_DATA", "WF_FMT_P_DATA", dataToUpload, OperatorID, "Data Upload for " + ToolID + " by Factory Automation");
                    MyLog.Information($"MES->ExecuteDC2 returned string={retString2}");
                }


            }
            catch (Exception ex)
            {
                MyLog.Error(ex, "ERROR in UploadData())");
                goodUpload = false;
            }
            return goodUpload;
        }       


        public ICommand MoveUpCmd => new RelayCommand(moveUpCmdHandler);
        public ICommand MoveDownCmd => new RelayCommand(moveDownCmdHandler);
        public ICommand AddEmptyRowCmd => new RelayCommand(addEmptyRowCmdHandler);

        public ICommand StartCmd => new RelayCommand(startCmdHandler);
        public ICommand StopCmd => new RelayCommand(stopCmdHandler);
        public ICommand PauseCmd => new RelayCommand(pauseCmdHandler);
        public ICommand ResumeCmd => new RelayCommand(resumeCmdHandler);
        public ICommand NextCmd => new RelayCommand(nextCmdHandler);
        public ICommand ReloadCmd => new RelayCommand(reloadCmdHandler);
        public ICommand AbortCmd => new RelayCommand(abortCmdHandler);
        public ICommand CompleteCmd => new RelayCommand(completeCmdHandler);

        public ICommand GoLocalCmd => new RelayCommand(goLocalCmdHandler);
        public ICommand GoRemoteCmd => new RelayCommand(goRemoteCmdHandler);

        public ICommand CloseAlarmCmd => new RelayCommand(closeAlarmCmdHandler);
        public ICommand AlarmListingCmd => new RelayCommand(alarmListingCmdHandler);
        public ICommand LogListingCmd => new RelayCommand(logListingCmdHandler);

        public ICommand CamstarCmd => new RelayCommand(camstarCmdHandler);
        public ICommand ResetHostCmd => new RelayCommand(resetHostCmdHandler);
        public ICommand ExitHostCmd => new RelayCommand(exitHostCmdHandler);



        private int startTimerLeft;

        private string _startTimerLeft = "";
        public string StartTimerLeftText
        {
            get {
                if (!string.IsNullOrWhiteSpace(_startTimerLeft))
                   return "(" + _startTimerLeft + ")";
                else
                   return "";
            }
            set { _startTimerLeft = value; RaisePropertyChanged(nameof(StartTimerLeftText)); }
        }

        public void  completeCmdHandler()
        {
            Messenger.Default.Send(new ReInitializeSystemMessage(0)); 
        }

        // PORT 1 CMD HANDLERS
        public void closeAlarmCmdHandler()
        {
            Messenger.Default.Send(new CloseAlarmMessage());
            CurrentAlarm = "";            
        }      

        private void StartTimers(int seconds)
        {
            if (seconds != -1)
            {
                dispatcherTimer.Tick += new EventHandler(startTimer_Tick);
                dispatcherTimer.Interval = new TimeSpan(0, 0, 1);
                startTimerLeft = seconds;
                StartTimerLeftText = seconds.ToString();
                dispatcherTimer.Start();
            }
            else if (seconds==0)
            {
                // Not sure this really means anything...
            }
            else
            {
                StartTimerLeftText = string.Empty;
            }
        }

        private void StopTimer()
        {
            if (dispatcherTimer.IsEnabled)
            {
                dispatcherTimer.Stop();
                dispatcherTimer.Tick -= new EventHandler(startTimer_Tick);
            }
            StartTimerLeftText = "";
        }

        private void startCmdHandler()
        {
            string port = CurrentToolConfig.Loadports[0];
           
            StopTimer();
            bool? result = true; 

            if (!string.IsNullOrEmpty(CurrentToolConfig.Dialogs.PostStartmessage))
            {
                var vm = new DialogViewModel(CurrentToolConfig.Dialogs.PostStartmessage, "Ok", "Cancel");
                result = dialogService.ShowDialog(vm);
            }

            if (result.HasValue && result.GetValueOrDefault() == true)
            {
                string[] lotIds;

                if (!string.IsNullOrEmpty(PortLotInfo.Port1Lot2))
                    lotIds = new string[] { PortLotInfo.Port1Lot1, PortLotInfo.Port1Lot2 };
                else
                    lotIds = new string[] { PortLotInfo.Port1Lot1 };

                // TODO: 
                LoadingWafers = ToolBusy = true;
                TimerText = "Starting PreProcessing for Equipment..."; 
#if TIMERALL
                Task.Delay(5000).ContinueWith(_ =>
                {
                    ToolBusy = false;
                    Started = true;
                    IsProcessing = true; 
                });
#endif
                StartToolAsync(port, lotIds);
            }
            else
            {

            }            
#if DEBUG1
            processingTimer.Tick += new EventHandler(newStageEvent);
            processingTimer.Interval = new TimeSpan(0, 0, 0, 10, 200);
            nextStep = 0;
            processingTimer.Start();
#endif
        }

        private bool toolBusy;
        public bool ToolBusy
        {
            get { return toolBusy; }
            set { toolBusy = value; RaisePropertyChanged(nameof(ToolBusy)); }
        }

        private string timerText;
        public string TimerText
        {
            get { return timerText; }
            set { timerText = value; RaisePropertyChanged(nameof(TimerText)); }
        }

        private async void StartToolAsync(string port, string[] lotIds)
        {
            try
            {
                bool result = await Task.Run(() => StartToolProcessing(port, lotIds));                
                if (result == true)
                {
                    Started = true;
                    IsProcessing = true;
                }
            }
            catch (Exception ex)
            {
                MyLog.Error(ex, "StartToolAsync()");
            }
            finally
            {
                LoadingWafers = ToolBusy = false;
            }
        }

        private bool StartToolProcessing(string port, string[] lotIds)
        {
            bool success = false; 
            bool? result = true;
            string errMessage = "";
            bool yesRetry = false;
            int numTry = 1;

            do
            {
                MyLog.Information($"SECS->DoPreProcessing #{numTry}");
                success = currentTool.DoPreprocessing();
                MyLog.Information($"SECS->DoPreProcessing returned {success}");
            } while (!success && ++numTry < 4);

            // System.Threading.Thread.Sleep(2000);

            numTry = 1;
            TimerText = "Sending RecipeSelection to Equipment...";
            do
            {
                MyLog.Information($"SECS->DoRecipeSelection({port}, Lot1:{PortLotInfo.Port1Lot1} and Lot2:{PortLotInfo.Port1Lot2}, {CurrentRecipe}, {PortLotInfo.OperatorID})", true);
                success = currentTool.DoRecipeSelection(port, lotIds, CurrentRecipe, PortLotInfo.OperatorID, out errMessage);
                MyLog.Information($"SECS->DoRecipeSelection returned {success}:errMessage={errMessage}");
                if (!success)
                {
                    yesRetry = false;
                    var vm = new DialogViewModel($"Error in DoRecipeSelection(). {errMessage}.", "Retry", "Cancel");
                    result = dialogService.ShowDialog(vm);
                    if (result.HasValue)
                        yesRetry = result.GetValueOrDefault();
                }
            } while (!success && ++numTry < 4 && yesRetry == true);

            if (success)
            {
                numTry = 1;
                TimerText = "Sending StartProcessing to Equipment...";
                do
                {
                    MyLog.Information($"SECS->DoStartProcessing({port}, Lot1:{PortLotInfo.Port1Lot1} and Lot2:{PortLotInfo.Port1Lot2}, {CurrentRecipe}, {PortLotInfo.OperatorID})", true);
                    success = currentTool.DoStartProcessing(port, lotIds, CurrentRecipe, PortLotInfo.OperatorID, out errMessage);
                    MyLog.Information($"SECS->DoStartProcessing returned {success}:errMessage={errMessage}");
                    if (!success)
                    {
                        yesRetry = false;
                        var vm = new DialogViewModel($"Error in DoStartProcessing(). {errMessage}.", "Retry", "Cancel");
                        result = dialogService.ShowDialog(vm);
                        if (result.HasValue)
                            yesRetry = result.GetValueOrDefault();
                    }
                } while (!success && ++numTry < 4 && yesRetry == true);
            }
            return success; 
        }

        private void startTimerExpiredHandler()
        {
            StopTimer();
            var vm = new DialogViewModel("The timer has expired to press Start. This lot will be placed onHold in Camstar now.", "", "Ok");
            bool? result = dialogService.ShowDialog(vm);         
            HoldWafers("Start Timer ran out by Factory Automation for " + PortLotInfo.OperatorID);
            emailViewHandler("Start Timer expired");
            Messenger.Default.Send(new ReInitializeSystemMessage(0));
        }

        private void startTimer_Tick(object sender, EventArgs e)
        {
            --startTimerLeft;
            if (startTimerLeft <= 0)
            {
                StopTimer();
                startTimerExpiredHandler();
            }
            else
            {
                StartTimerLeftText = startTimerLeft.ToString();
            }
        }

        private void stopCmdHandler()
        {
            StopTimer();
            MyLog.Information($"SECS->SendSECSStop()",true);
            currentTool.SendSECSStop();
            Started = false;
            IsProcessing = false;
            // TODO: Same as abort or not? 
            // Aborted = true; 
            //HoldWafers("Aborted by: " + PortLotInfo.OperatorID);
            //UpdateWaferStatus("Aborted");
        }

        private void pauseCmdHandler()
        {
            MyLog.Information($"SECS->SendSECSPause()",true);
            currentTool.SendSECSPause();
            Paused = true; 
            //Started = false;
            IsProcessing = false;
        }

        private void resumeCmdHandler()
        {
            MyLog.Information($"SECS->SendSECSResume()",true);
            currentTool.SendSECSResume();
            Paused = false; 
            //Started = true;
            IsProcessing = true;
        }

        private void nextCmdHandler()
        {
            MyLog.Information($"SECS->SendSECSNext()", true);
            currentTool.SendSECSNext();
            Paused = false;
            IsProcessing = true;
        }

        private void reloadCmdHandler()
        {
            MyLog.Information($"SECS->SendSECSReload()", true);
            currentTool.SendSECSReload();
            Paused = false;
            IsProcessing = true;
        }

        private void abortCmdHandler()
        {
            StopTimer();
            var vm = new DialogViewModel("Are you sure you want to Abort?", "Yes", "No");
            bool? result = dialogService.ShowDialog(vm);
            if (result.HasValue && result.GetValueOrDefault() == true)
            {
                MyLog.Information($"SECS->SendSECSAbort()",true);
                currentTool.SendSECSAbort();
                Aborted = true; 
                Started = false;
                IsProcessing = false;
                HoldWafers("Aborted by Factory Automation for " + PortLotInfo.OperatorID);
                UpdateWaferStatus("Aborted");
                //ReInitializeSystem();
            }
            else
            {

            }
        }
        private void goLocalCmdHandler()
        {
            MyLog.Information($"SECS->SendSECSGoLocal()",true);
            if (currentTool.SendSECSGoLocal())
                LocalMode = true;            
        }

        private void goRemoteCmdHandler()
        {
            MyLog.Information($"SECS->SendSECSGoRemote()",true);
            if (currentTool.SendSECSGoRemote())
                LocalMode = false;
        }

        private void alarmListingCmdHandler()
        {
            Messenger.Default.Send(new ToggleAlarmViewMessage());
        }

        private void logListingCmdHandler()
        {
            Messenger.Default.Send(new ToggleLogViewMessage());
        }

        private void resetHostCmdHandler()
        {
            var vm = new DialogViewModel("Are you sure you want to Reset Host?", "Yes", "No");
            bool? result = dialogService.ShowDialog(vm);
            if (result.HasValue && result.GetValueOrDefault() == true)
            {
                MyLog.Information("Reset Host called...");
                // 3/3/19 - Per ZH: Took out putting on hold for now
                //if (AreThereWafers)
                //    HoldWafers("ResetHost by Factory Automation for " + PortLotInfo.OperatorID);
                emailViewHandler("Resetting Host");
                Messenger.Default.Send(new ReInitializeSystemMessage(0));
            }
            else
            {

            }
        }


        #region EMAIL HANDLERS

        private string GetEmailAddresses()
        {
            string emails = "";
            foreach (string emailAddress in CurrentToolConfig.PrimaryEmailAddressees)
                emails += emailAddress + ";";
            return emails; 
        }
        private string GetAlarmEmailAddresses()
        {
            string emails = "";
            foreach (string emailAddress in CurrentToolConfig.EmailAddresseesForAlarms)
                emails += emailAddress + ";";
            return emails;
        }
        private void emailViewHandler(string subject)
        {
            string sendTo = GetEmailAddresses();
            string bodyText = $"{DateTime.Now.ToString()} EVENT VALUES: Operator:{PortLotInfo.OperatorID} ToolID:{PortLotInfo.ToolID}" + Environment.NewLine;
            bodyText += $"Lot1:{PortLotInfo.Port1Lot1}";
            if (!string.IsNullOrEmpty(PortLotInfo.Port1Lot2)) bodyText += $" Lot2:{PortLotInfo.Port1Lot2}";

            if (CurrentToolConfig.Dialogs.ShowEmailBox)
            {
                var vm = new EmailViewModel(sendTo, subject, bodyText);
                var view = new EmailView() { DataContext = vm, WindowStartupLocation = WindowStartupLocation.CenterScreen };
                view.ShowDialog();
            }
            else
                Messenger.Default.Send(new CloseAndSendEmailMessage(sendTo, subject, bodyText));
        }
        private void logEmailHandler(EventMessage msg)
        {
            string sendTo = GetEmailAddresses();
            string bodyText = $"{msg.MsgDateTime} LOG ENTRY: Operator:{PortLotInfo.OperatorID} ToolID:{PortLotInfo.ToolID}" + Environment.NewLine;
            bodyText += $"Lot1:{PortLotInfo.Port1Lot1}";
            if (!string.IsNullOrEmpty(PortLotInfo.Port1Lot2)) bodyText += $" Lot2:{PortLotInfo.Port1Lot2}";

            bodyText += Environment.NewLine;
            bodyText += Environment.NewLine;
            bodyText += msg.Message;

            if (CurrentToolConfig.Dialogs.ShowEmailBox)
            {
                var vm = new EmailViewModel(sendTo, "FAS Log Entry", bodyText);
                var view = new EmailView() { DataContext = vm, WindowStartupLocation = WindowStartupLocation.CenterScreen };
                view.ShowDialog();
            }
            else
                Messenger.Default.Send(new CloseAndSendEmailMessage(sendTo, "FAS Log Entry", bodyText));
        }

        private void alarmEmailHandler(DateTime alarmTime,string subject)
        {
            string sendTo = GetAlarmEmailAddresses();
            string bodyText = $"{alarmTime.ToString()} CRITICAL ALARM: Operator: {PortLotInfo.OperatorID} ToolID: {PortLotInfo.ToolID}" + Environment.NewLine;
            bodyText += $"Lot1:{PortLotInfo.Port1Lot1}";
            if (!string.IsNullOrEmpty(PortLotInfo.Port1Lot2)) bodyText += $" Lot2:{PortLotInfo.Port1Lot2}";

            bodyText += Environment.NewLine;
            bodyText += Environment.NewLine;
            bodyText += subject;

            if (CurrentToolConfig.Dialogs.ShowEmailBox)
            {
                var vm = new EmailViewModel(sendTo, subject, bodyText);
                var view = new EmailView() { DataContext = vm, WindowStartupLocation = WindowStartupLocation.CenterScreen };
                view.ShowDialog();
            }
            else
                Messenger.Default.Send(new CloseAndSendEmailMessage(sendTo, subject, bodyText));
        }
        private void errorEmailHandler(string errorText)
        {
            string sendTo = GetEmailAddresses();
            string bodyText = $"{DateTime.Now.ToString()} CRITICAL ERROR: Operator: {PortLotInfo.OperatorID} ToolID: {PortLotInfo.ToolID}" + Environment.NewLine;
            bodyText += $"Lot1:{PortLotInfo.Port1Lot1}";
            if (!string.IsNullOrEmpty(PortLotInfo.Port1Lot2)) bodyText += $" Lot2:{PortLotInfo.Port1Lot2}";

            bodyText += Environment.NewLine;
            bodyText += Environment.NewLine;
            bodyText += errorText;

            if (CurrentToolConfig.Dialogs.ShowEmailBox)
            {
                var vm = new EmailViewModel(sendTo, "CRITICAL ERROR", bodyText);
                var view = new EmailView() { DataContext = vm, WindowStartupLocation = WindowStartupLocation.CenterScreen };
                view.ShowDialog();
            }
            else
                Messenger.Default.Send(new CloseAndSendEmailMessage(sendTo, "CRITICAL ERROR", bodyText));
        }

        private void CloseEmailResponseMsgHandler(CloseAndSendEmailMessage msg)
        {
            if (!string.IsNullOrEmpty(msg.SendTo))
            {
                string fromAddress = CurrentSystemConfig.FromEmailAddress;
                MailMessage message = new MailMessage();
                message.From = new MailAddress(fromAddress);
                message.Subject = msg.Subject;
                message.Body = msg.EmailBody;

                foreach (var address in msg.SendTo.Split(new[] { ";" }, StringSplitOptions.RemoveEmptyEntries))
                {
                    message.To.Add(address);
                }

                SmtpClient client = new SmtpClient(CurrentSystemConfig.EmailServer, CurrentSystemConfig.EmailPort);
                client.Timeout = 100;
                // Credentials are necessary if the server requires the client 
                // to authenticate before it will send e-mail on the client's behalf.
                client.Credentials = CredentialCache.DefaultNetworkCredentials;

                try
                {
#if RELEASE
                    client.Send(message);
#endif
                }
                catch (Exception ex)
                {
                    MyLog.Error(ex, ex.Message);
                }
            }
            else
            {
                var vm = new DialogViewModel("Operator cancelled the sending of email", "", "Ok");
                dialogService.ShowDialog(vm);
            }
        }
#endregion

        private void exitHostCmdHandler()
        {
            var vm = new DialogViewModel("Are you sure you want to Exit Host?", "Yes", "No");
            bool? result = dialogService.ShowDialog(vm);
            if (result.HasValue && result.GetValueOrDefault() == true)
            {
                MyLog.Information($"Exit Host called: EVENT VALUES: Operator:{PortLotInfo.OperatorID} ToolID:{PortLotInfo.ToolID}");
                emailViewHandler("Exiting Host");
                if (Globals.AshlServer != null)
                    AshlServer.requestStopAndJoin();
                if (TheTraceDataCollector != null)
                {
                    TheTraceDataCollector.CloseDataFile();
                    TheTraceDataCollector = null;
                }

                _mesService.CloseConnection();

                Application.Current.Shutdown();
            }
            else
            {

            }
        }

        // Testing as complete
        private void camstarCmdHandler()
        {
            string htmLink = CurrentSystemConfig.CamstarURL;
            
            try
            {
                 System.Diagnostics.Process.Start(htmLink);
            }
            catch (Exception ex)
            {
                MyLog.Error(ex, ex.Message);
            }

        }
    }    
}